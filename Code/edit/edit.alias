embed
<drac2>


def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None

def grab_settings_dictionary() -> dict:
    """
    Grabs and sets up settings dictionary

    Return:
        dict: Settings dictionary
    """

    full_svar_dict = {
        "Settings": {
            "lfg_integration": False,
            "pro_rate_refund": True,
            "reliable_talent": False,
            "success_mod_threshold": {"-999": 1, "5": 2, "10": 3, "15": 4, "20": 5},
            "whitelisted_channel_ids": [],
            "parent_channel_inherit": False,
            "xp_categories": []    
        },
        "Categories": {}
    }

    if (svar_dict := get_svar("craft_settings")):
        svar_dict = load_json(svar_dict)


        for setting, setting_value in full_svar_dict["Settings"].items():

            if not setting in svar_dict["Settings"].keys():
                svar_dict["Settings"][setting] = setting_value

        if not "-999" in svar_dict["Settings"]["success_mod_threshold"].keys():
            svar_dict["Settings"]["success_mod_threshold"]["-999"] = 1

    else:
        svar_dict = full_svar_dict

    return svar_dict


def main(input_list: list[str]) -> tuple(str, str, str, str):

    error_img = "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Crafting-System-Redux/main/Data/images/error.png"
    color = "#CF142B"

    current_time = int(time())
    svar_dict = grab_settings_dictionary()

    if len(svar_dict["Settings"]["whitelisted_channel_ids"]) != 0:

        found = False

        for id_num in svar_dict["Settings"]["whitelisted_channel_ids"]:

            if int(id_num) == ctx.channel_id or (svar_dict["Settings"]["parent_channel_inherit"] and int(id_num) == ctx.channel.parent.id)
                found = True
                break

        if not found:
            return False, "You Have Been Sneak Attacked by an Error", "Invalid channel/thread", error_img, color

    if not (ch := character()):
        return "You Have Been Sneak Attacked by an Error", "You must have an active character", error_img, color

    if (cvar_dict := ch.get_cvar("craft_dict")):
        cvar_dict = load_json(cvar_dict)

    else:
        return "You Have Been Sneak Attacked by an Error", "You must have no active crafting session", error_img, color

    if len(input_list) < 2:
        return "You Have Been Sneak Attacked by an Error", "Expected failure/success and # amount", error_img, color

    try:
        input_list[1] = int(input_list[1])

    except:
        return "You Have Been Sneak Attacked by an Error", "Expected a number amount", error_img, color

    if not ch.cc_exists("Craft: Successes") and ch.cc_exists("Craft: Failures"):
        return "You Have Been Sneak Attacked by an Error", "Crafting CCs do not exist", error_img, color

    if (search_result := search_list(input_list[0], ["Failure", "Success"])):

        if len(search_result) == 1:
            input_list[0] = search_result[0]

        else:
            return "You Have Been Sneak Attacked by an Error", "Expected failure/success", error_img, color 

    else:
        return "You Have Been Sneak Attacked by an Error", "Expected failure/success", error_img, color

    output_list = []

    if input_list[0] == "Success":

        success_cc = ch.cc("Craft: Successes")
        success_cc.mod(input_list[1])

        if input_list[1] > 0:
            output_list.append(f"Successes: {success_cc.value}/{success_cc.max} (+{input_list[1]})")

        elif input_list[1] < 0:
            output_list.append(f"Successes: {success_cc.value}/{success_cc.max} ({input_list[1]})")

        else:
            output_list.append(f"Successes: {success_cc.value}/{success_cc.max}")

        if f"{success_cc.value}/{success_cc.max}" != ch.cc_str("Craft: Successes"):
            output_list.append(ch.cc_str("Craft: Successes"))

        if input_list[1] != 0:
            cvar_dict["log"][str(current_time)] = f"Success CC altered by {input_list[1]}"

        title = f"{name} ({ctx.author.display_name}) Alters Their Crafting Successes"
        

    else:
        failure_cc = ch.cc("Craft: Failures")
        failure_cc.mod(input_list[1])

        if failure_mod > 0:
            output_list.append(f"Failures: {failure_cc.value}/{failure_cc.max} (+{failure_mod})")

        elif success_mod < 0:
            output_list.append(f"Failures: {failure_cc.value}/{failure_cc.max} ({failure_mod})")

        else:
            output_list.append(f"Failures: {failure_cc.value}/{failure_cc.max}")

        if f"{failure_cc.value}/{failure_cc.max}" != ch.cc_str("Craft: Failures"):
            output_list.append(ch.cc_str("Craft: Failures"))

        if input_list[1] != 0:
            cvar_dict["log"][str(current_time)] = f"Failure CC altered by {input_list[1]}"

        title = f"{name} ({ctx.author.display_name}) Alters Their Crafting Failures"

    ch.set_cvar("craft_dict", dump_json(cvar_dict))

    return title, "\n".join(output_list), image, ""


title, f, thumb, color = main(&ARGS&)


</drac2>
-title "{{title}}"
-f "{{f}}"
-thumb "{{thumb}}"
-color "{{color}}"
-footer "{{ctx.prefix}}craft edit [failure/success] [#] | 8/31/24 | ShadowsStride"