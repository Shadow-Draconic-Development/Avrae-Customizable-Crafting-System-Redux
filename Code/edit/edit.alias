embed
<drac2>
# *******************************************************
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International License 
# * available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def set_default_settings(dictionary: dict, default_dictionary: dict) -> dict:
    """
    Loops through dictionary checking for missing entries and adding default ones where necessary

    Args:
        dictionary (dict): Dictionary to be checked
        default_dictionary (dict): Default dictionary

    Return:
        dict: Corrected dictionary
    """

    # For each key in the default dictionary
    for default_key in default_dictionary.keys():

        # If the value is not a dictionary
        if typeof(default_dictionary[default_key]) != "SafeDict":

            if default_key in dictionary.keys():
                pass

            else:
                dictionary[default_key] = default_dictionary[default_key]

        # If the value is a dictionary
        else:

            # Check to see if it is a threshold dictionary
            try:
                for test_key in default_dictionary[default_key].keys():
                    float(test_key)

                if default_key in dictionary.keys():
                    pass

                else:
                    dictionary[default_key] = default_dictionary[default_key]

            # If it is not a threshold dictionary, run recursive call to check values of inner dictionary
            except:
                dictionary[default_key] = set_default_settings(dictionary[default_key], default_dictionary[default_key]) 

    return dictionary


def check_channel(svar_dict: dict) -> bool:
    if len(channel_list := svar_dict["whitelisted_channel_ids"]) == 0:
        return True

    else:
        if ctx.channel.id in channel_list:
            return True

        else:
            if (parent_obj := ctx.channel.parent):
                if svar_dict["parent_channel_inherit"] and parent_obj.id in channel_list:
                    return True

                else:
                    return False

            else:
                return False

        # If a match was found
        if channel_id != 0:
            return ['Success']

        # If a match was not found
        else:
            try:

                # Inherit rules are off
                if not settings_dict["parent_channel_inherit"]:
                    int('boop')

                # Inherit rules are on
                else:
                    return ['Error', f'{ctx.channel.parent.name} is not a valid channel nor is {ctx.channel.name} a valid thread to run this alias (please consult server staff for more details)']
            
            except:
                return ['Error', f'{ctx.channel.name} is not a valid channel to run this alias (please consult server staff for more details)']


def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None


def main(input_list: list[str]) -> list[str]:
    """
    Main program function

    Args:
        input_list (list[str]): List of inputs
        ch = character(): Character object
    
    Return:
        (list[str]): Result    
    """

    svar_dict_default = {
        "lfg_integration": False,
        "pro_rate_refund": True,
        "success_dispType": "star",
        "failure_dispType": "hex",
        "jack_of_trades": True,
        "reliable_talent": False,
        "success_mod_threshold": {
            "-999": 1,
            "5": 2,
            "10": 3,
            "15": 4,
            "20": 5
            }, 
        "whitelisted_channel_ids": [], 
        "parent_channel_inherit": False, 
        "xp_categories": False, 
        "max_history": 15,
    }

    if (svar_test := get_svar("crafting_settings")):
        svar_dict = set_default_settings(load_json(svar_test), svar_dict_default)

        if check_channel(svar_dict):
            ch = character()

        else:
            return "You Have Been Sneak Attacked by an Error", "This channel/thread has not been whitelisted for crafting. Speak to a staff member for more information.", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Crafting-System/main/Data/images/error.png", "#CF142B"

    else:
        svar_dict = svar_dict_default

    if ch.cc_exists("Crafting: Successes") and ch.cc_exists("Crafting: Failures"):

        if (search_result := search_list(input_list[0], ["Successes", "Failures"])):

            if len(search_result) == 1:
                ch.mod_cc(f"Crafting: {cc}", input_list[1])
                input_list[0] = search_result[0]

            else:
                return "You Have Been Sneak Attacked by an Error", "Invalid input entered (too vague for a match)", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Crafting-System/main/Data/images/error.png", "#CF142B"

        else:
            return "You Have Been Sneak Attacked by an Error", "Invalid input entered (you must enter either `failures` or `successes`)", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Crafting-System/main/Data/images/error.png", "#CF142B"

    else:
        return "You Have Been Sneak Attacked by an Error", "Crafting custom counteres do not exist", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Crafting-System/main/Data/images/error.png", "#CF142B"

    if (cvar_test := ch.get_cvar("crafting_dict")):
        cvar_dict = load_json(cvar_test)

    else:
        return "You Have Been Sneak Attacked by an Error", "Crafting CVAR Does Not Exist", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Crafting-System/main/Data/images/error.png", "#CF142B"
    
    # If there are two or more arguments
    if len(input_list) > 1:

        try:
            input_list[1] = int(input_list[1])

        except:
            return "You Have Been Sneak Attacked by an Error", "Second argument is not a number", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Crafting-System/main/Data/images/error.png", "#CF142B"

    else:
        return "You Have Been Sneak Attacked by an Error", "Expected at least 2 arguments", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Crafting-System/main/Data/images/error.png", "#CF142B"

    # Pulls counters
    success_cc = ch.cc("Crafting: Successes")
    failure_cc = ch.cc("Crafting: Failures")
    result_string = []
  
    result_string.append("**Successes:**")
    result_string.append(f"{success_cc.value}/{success_cc.max}")

    if (success_str := ch.cc_str("Crafting: Successes")) == result_string[-1]:
        success_str = False

    else:
        result_string.append(success_str)

    result_string.append("\n**Failures**")
    result_string.append(f"{failure_cc.value}/{failure_cc.max}")

    if (failure_str := ch.cc_str("Crafting: Failures")) == result_string[-1]:
        failure_str = False
    
    else:
        result_string.append(failure_str)


    if input_list[1] != 0:

        if input_list[0] == "Success":

            _index = 1

        else:
            if success_str:
                _index = 4

            else:
                _index = 5

        if input_list[1] > 0:
            result_string[_index] += f" (+{input_list[1]})"

        else:
            result_string[_index] += f" ({input_list[1]})"

    else:
        result_string.insert(0, f"`Instead, you should run '{ctx.prefix}craft log' to view your counters`")

    return f"{name} Tries to Edit Their Counters", "\n".join(result_string), "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/craft/images/main.png", cvar_dict["Color"]


# Runs main program
title, f, thumb, color = main(&ARGS&)


</drac2>
-title "{{title}}"
-f "{{f}}"
-thumb "{{thumb}}"
-color "{{color}}"
-footer "{{ctx.prefix}}craft edit [success/failure] [#] | Updated 12/23/2023 | ShadowsStride"