embed
<drac2>


def set_default_settings(dictionary: dict, default_dictionary: dict) -> dict:
    """
    Loops through dictionary checking for missing entries and adding default ones where necessary

    Args:
        dictionary (dict): Dictionary to be checked
        default_dictionary (dict): Default dictionary

    Return:
        dict: Corrected dictionary
    """

    # For each key in the default dictionary
    for default_key in default_dictionary.keys():

        # If the value is not a dictionary
        if typeof(default_dictionary[default_key]) != "SafeDict":

            if default_key in dictionary.keys():
                pass

            else:
                dictionary[default_key] = default_dictionary[default_key]

        # If the value is a dictionary
        else:

            # Check to see if it is a threshold dictionary
            try:
                for test_key in default_dictionary[default_key].keys():
                    float(test_key)

                if default_key in dictionary.keys():
                    pass

                else:
                    dictionary[default_key] = default_dictionary[default_key]

            # If it is not a threshold dictionary, run recursive call to check values of inner dictionary
            except:
                dictionary[default_key] = set_default_settings(dictionary[default_key], default_dictionary[default_key]) 

    return dictionary


def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None


def check_channel(svar_dict: dict) -> bool:
    if len(channel_list := svar_dict["whitelisted_channel_ids"]) == 0:
        return True

    else:
        if ctx.channel.id in channel_list:
            return True

        else:
            if (parent_obj := ctx.channel.parent):
                if svar_dict["parent_channel_inherit"] and parent_obj.id in channel_list:
                    return True

                else:
                    return False

            else:
                return False


def edit_funds(ch: AliasCharacter, gold_amount: float) -> tuple(dict|None, dict|str, float|str):
    
    def parse_gold_amount(amount: float) -> tuple(int, int, int):

        gold = int(amount)
        remaining_copper = round((amount - gold) * 100)
        silver = remaining_copper // 10
        copper = remaining_copper % 10

        return gold, silver, copper

    purse_obj = ch.coinpurse

    if gold_amount < 0:
        if (gold_amount := abs(gold_amount)) >= (purse_total := purse_obj.total):
            gold, silver, copper = parse_gold_amount(gold_amount)

            delta_dict = purse_obj.modify_coins(
                gp=gold * -1,
                sp=silver * -1,
                cp=copper * -1 
            )

            after_dict = purse_obj.get_coins()

            return delta_dict, after_dict, gold_amount

        else:
            gold, silver, copper = parse_gold_amount(purse_total - gold_amount)

            result_string = ""

            if gold > 0:
                result_string += f"{gold} gold,"

            else:
                pass

            if silver > 0:
                result_string += f" {silver} silver,"

            else:
                pass

            if copper > 0:
                result_string += f" {copper} copper"

            else:
                pass

            return None, f"{name} is {result_string.lstrip().rstrip(",")} short", ""

    else:
        gold, silver, copper = parse_gold_amount(gold_amount)

        delta_dict = purse_obj.modify_coins(
            gp=gold,
            sp=silver,
            cp=copper
        )

        after_dict = purse_obj.get_coins()

        return delta_dict, after_dict, gold_amount


def main() -> tuple(str, str, str, str):

    svar_dict_default = {
        "lfg_integration": False,
        "pro_rate_refund": True,
        "success_dispType": "star",
        "failure_dispType": "hex",
        "jack_of_trades": True,
        "reliable_talent": False,
        "success_mod_threshold": {
            "-999": 1,
            "5": 2,
            "10": 3,
            "15": 4,
            "20": 5
            }, 
        "whitelisted_channel_ids": [], 
        "parent_channel_inherit": False, 
        "xp_categories": False, 
        "max_history": 15,
        "backup_default": {
            "level": 0,
            "dc": 15,
            "nat1": -5,
            "nat20": 5,
            "total_succ": 17,
            "max_fail": 4,
            "color": ""
        }
    }

    if (svar_test := get_svar("crafting_settings")):
        svar_dict = set_default_settings(load_json(svar_test), svar_dict_default)

    else:
        svar_dict = svar_dict_default

    if check_channel(svar_dict):
        ch = character()

    else:
        return "You Have Been Sneak Attacked by an Error", "This channel/thread has not been whitelisted for crafting. Speak to a staff member for more information.", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Crafting-System/main/Data/images/error.png", "#CF142B"

    if (cvar_test := ch.get_cvar("crafting_dict")):
        cvar_dict = load_json(cvar_test)

        if "backup" in cvar_dict.keys():
            pass

        else:
            return "You Have Been Sneak Attacked by an Error", "You have no backups", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Crafting-System/main/Data/images/error.png", "#CF142B"

    else:
        return "You Have Been Sneak Attacked by an Error", "Crafting CVAR does not exist", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Crafting-System/main/Data/images/error.png", "#CF142B"


    if typeof(cvar_dict["backup"]["cvar"]) == "SafeDict":
        pass

    else:
        backup_dict = {
            "cvar": {
                "name": cvar_dict["backup"]["cvar"][0],
                "category": cvar_dict["backup"]["cvar"][1],
                "type": cvar_dict["backup"]["cvar"][2],
                "time": cvar_dict["backup"]["cvar"][3],
                "cooldown": cvar_dict["backup"]["cvar"][4],
                "crafting_cost": cvar_dict["backup"]["cvar"][5],
                "stat": cvar_dict["backup"]["cvar"][6],
                "succ_mult": cvar_dict["backup"]["cvar"][7],
            },
            "success_cc": {
                "value": cvar_dict["backup"]["success_cc"][0],
                "max": cvar_dict["backup"]["success_cc"][1],
                "desc": cvar_dict["backup"]["success_cc"][2],
                "title": cvar_dict["backup"]["success_cc"][3]
            },
            "failure_cc": {
                "value": cvar_dict["backup"]["failure_cc"][0],
                "max": cvar_dict["backup"]["failure_cc"][1],
                "desc": cvar_dict["backup"]["failure_cc"][2],
                "title": cvar_dict["backup"]["failure_cc"][3]
            },
            "money_back": cvar_dict["backup"]["money_back"]
        }

        if (item_category := cvar_dict["backup"]["cvar"][1]) in svar_dict.keys():
            if (item_type := cvar_dict["backup"]["cvar"][2]) in svar_dict[item_category].keys():
                backup_dict.update({
                    "level": svar_dict[item_category][item_type][0],
                    "dc": svar_dict[item_category][item_type][1],
                    "nat1": svar_dict[item_category][item_type][2],
                    "nat20": svar_dict[item_category][item_type][3],
                    "total_succ": svar_dict[item_category][item_type][4],
                    "max_fail": svar_dict[item_category][item_type][5],
                    "color": svar_dict[item_category][item_type][-1]
                })
                
            else:
                backup_dict.update(svar_dict["backup_default"])

        else:
            backup_dict.update(svar_dict["backup_default"])

        cvar_dict["backup"] = backup_dict

        ch.set_cvar("crafting_dict", dump_json(cvar_dict))

    orignal_coinpurse = ch.coinpurse.get_coins()

    if cvar_dict["backup"]["success_cc"]["value"] != cvar_dict["backup"]["success_cc"]["max"] and cvar_dict["backup"]["failure_cc"]["value"] != cvar_dict["backup"]["failure_cc"]["max"]:
        
        if cvar_dict["backup"]["money_back"] != 0:
            output1, output2, output3 = edit_funds(ch, abs(money_back) * -1)

            if (remove_delta_dict := output1):
                remove_after_dict = output2
                gold_removed = output3

            else:
                return "You Have Been Sneak Attacked by an Error", f"You do not have enough funds to do a restore\n\n{output2}", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Crafting-System/main/Data/images/error.png", "#CF142B"

        else:
            remove_delta_dict = {}
            remove_after_dict = orignal_coinpurse
            gold_removed = 0

    else:
        return "You Have Been Sneak Attacked by an Error", f"You cannot restore a completed item", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Crafting-System/main/Data/images/error.png", "#CF142B"

    if ch.cc_exists("Crafting: Successes") and ch.cc_exists("Crafting: Failures"):
        success_cc = ch.cc("Crafting: Successes")
        failure_cc = ch.cc("Crafting: Failures")

        if success_cc.value != success_cc.max and failure_cc.value != failure_cc.max and svar_dict["pro_rate_refund"] and crafting_cost := cvar_dict["crafting_cost"]:

            percentage_back = (1 - ((success_cc.value / success_cc.max) + (failure_cc.value /(failure_cc.max * 2)))) * .5

            if (money_back := round(abs(crafting_cost) * percentage_back, 2)) <= 0:
                add_delta_dict = {}
                add_after_dict = remove_after_dict
                gold_added = 0

            else:
                add_delta_dict, add_after_dict, gold_added = edit_funds(ch, money_back)

        else:
            add_delta_dict = {}
            add_after_dict = remove_after_dict
            gold_added = 0   

        temp_str_dictionary = dump_json(cvar_dict["backup"])
 
        for cvar_item in ["name", "category", "type", "cooldown", "crafting_cost", "stat", "succ_mult", "level", "dc", "nat1", "nat20", "total_succ", "max_fail", "color"]:
            cvar_dict["backup"]["cvar"][cvar_item] = cvar_dict[cvar_item]


        cvar_dict["backup"]["money_back"] = gold_added

        for counter_pair in [[success_cc, "success_cc"], [failure_cc, "failure_cc"]]:

            cvar_dict["backup"][counter_pair[1]]["value"] = counter_pair[0].value
            cvar_dict["backup"][counter_pair[1]]["max"] = counter_pair[0].max
            cvar_dict["backup"][counter_pair[1]]["desc"] = counter_pair[0].desc
            cvar_dict["backup"][counter_pair[1]]["title"] = counter_pair[0].title
                

        backup_dict = load_json(temp_str_dictionary)

        for cvar_key, cvar_value in backup_dict["cvar"].items():
            cvar_dict[cvar_key] = cvar_value

        succ_dispType = success_cc.display_type
        fail_dispType = failure_cc.display_type

        success_cc = ch.edit_cc(
            name="Crafting: Successes",
            maxVal=str(backup_dict["success_cc"]["max"]),
            title=backup_dict["success_cc"]["title"],
            desc=backup_dict["success_cc"]["desc"],
            initial_value=str(backup_dict["success_cc"]["value"])
        )

        failure_cc = ch.edit_cc(
            name="Crafting: Failures",
            maxVal=str(backup_dict["failure_cc"]["max"]),
            title=backup_dict["failure_cc"]["title"],
            desc=backup_dict["failure_cc"]["desc"],
            initial_value=str(backup_dict["success_cc"]["value"])
        )

    else:

        if (money_back := cvar_dict["backup"]["money_back"]) != 0:

            output1, output2, output3 = edit_funds(ch, abs(money_back) * -1)

            if (remove_delta_dict := output1):
                remove_after_dict = output2
                gold_removed = output3

            else:
                return "You Have Been Sneak Attacked by an Error", f"You do not have enough funds to do a restore\n\n{output2}", "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Crafting-System/main/Data/images/error.png", "#CF142B"

        else:
            remove_delta_dict = {}
            remove_after_dict = orignal_coinpurse
            gold_removed = 0

        add_delta_dict = {}
        add_after_dict = remove_after_dict
        gold_added = 0

        backup_dict = cvar_dict.pop("backup")

        for cvar_key, cvar_value in backup_dict["cvar"].items():
            cvar_dict[cvar_key] = cvar_value

        success_cc = ch.create_cc(
            name="Crafting: Successes",
            minVal="0",
            maxVal=str(backup_dict["success_cc"]["max"]),
            reset="none",
            dispType=svar_dict["success_dispType"],
            title=backup_dict["success_cc"]["title"],
            desc=backup_dict["success_cc"]["desc"],
            initial_value=str(backup_dict["success_cc"]["value"])
        )

        failure_cc = ch.create_cc(
            name="Crafting: Failures",
            minVal="0",
            maxVal=str(backup_dict["failure_cc"]["max"]),
            reset="none",
            dispType=svar_dict["failure_dispType"],
            title=backup_dict["failure_cc"]["title"],
            desc=backup_dict["failure_cc"]["desc"],
            initial_value=str(backup_dict["failure_cc"]["value"])
        )

        cvar_dict.pop("backup")

    ch.set_cvar("crafting_dict", dump_json(cvar_dict))
    result_string = ["**Successes:**"]

    if (succ_str1 := f"{success_cc.value}/{success_cc.max}") == (succ_str2 := success_cc.full_str().split("\n")[0]):
        result_string.append(succ_str1)

    else:
        result_string.append(succ_str1 + "\n" + succ_str2)

    result_string.append("**Failures:**")

    if (fail_str1 := f"{failure_cc.value}/{failure_cc.max}") == (fail_str2 := failure_cc.full_str().split("\n")[0]):
        result_string.append(fail_str1)

    else:
        result_string.append(fail_str1 + "\n" + fail_str2)

    if gold_added != 0 and gold_removed != 0:

        final_delta_dict = {}
        final_money_change = 0

        for coin_key, coin_value in add_delta_dict.items():
            if coin_key in final_delta_dict.keys():
                final_delta_dict[coin_key] += abs(coin_value)

            else:
                final_delta_dict[coin_key] = abs(coin_value)

            final_money_change =+ abs(coin_value)

        for coin_key, coin_value in remove_delta_dict.items():
            if coin_key in final_delta_dict.keys():
                final_delta_dict[coin_key] -= abs(coin_value)

            else:
                final_delta_dict[coin_key] = -1 * abs(coin_value)

            final_money_change -= abs(coin_value)

        if final_money_change % 1 = 0:
            final_money_change = int(final_money_change)

        else:
            pass

        coin_emoji_mapping = {
            "cp": "<:DDBCopper:953399505129205830>",
            "sp": "<:DDBSilver:953399505124995122>",
            "ep": "<:DDBElectrum:953399505129205831>",
            "gp": "<:DDBGold:953399505062080594>",
            "pp": "<:DDBPlatinum:953399504739106847>"
        }
        
        money_str_list = []

        for money_shorthand, money_value in ch.coinpurse.get_coins().items():
            if final_delta_dict[money_shorthand] == 0:
                money_str_list.append(f"\n{coin_emoji_mapping[money_shorthand]} {money_value}")

            elif final_delta_dict[money_shorthand] > 0:
                money_str_list.append(f"\n{coin_emoji_mapping[money_shorthand]} {money_value} (+{final_delta_dict[money_shorthand]})")

            else:
                money_str_list.append(f"\n{coin_emoji_mapping[money_shorthand]} {money_value} ({final_delta_dict[money_shorthand]})")

        if final_money_change > 0:
            money_str_list.append(f"<:DDBGold:953399505062080594> {final_money_change} added")

        else:
            money_str_list.append(f"<:DDBGold:953399505062080594> {final_money_change} removed")

        result_string.append("\n".join(money_str_list))

    else:
        pass

    if image != "":
        img_url = image

    else:
        img_url = "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Crafting-System/main/Data/images/main.png"


    return f"{name} Restores the Crafting Progress for a {cvar_dict[name]}", "\n".join(result_string), img_url, cvar_dict["color"]


title, f, thumb, color = main()


</drac2>
-title "{{title}}"
-f "{{f}}"
-thumb "{{thumb}}"
-color "{{color}}"
-footer "{{ctx.prefix}}craft restore | Updated 1/14/24 | ShadowsStride"