embed
<drac2>
# *******************************************************
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International License 
# * available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None


def set_default_settings(dictionary: dict, default_dictionary: dict) -> dict:
    """
    Loops through dictionary checking for missing entries and adding default ones where necessary

    Args:
        dictionary (dict): Dictionary to be checked
        default_dictionary (dict): Default dictionary

    Return:
        dict: Corrected dictionary
    """

    # For each key in the default dictionary
    for default_key in default_dictionary.keys():

        # If the value is not a dictionary
        if typeof(default_dictionary[default_key]) != "SafeDict":

            if default_key in dictionary.keys():
                pass

            else:
                dictionary[default_key] = default_dictionary[default_key]

        # If the value is a dictionary
        else:

            # Check to see if it is a threshold dictionary
            try:
                for test_key in default_dictionary[default_key].keys():
                    float(test_key)

                if default_key in dictionary.keys():
                    pass

                else:
                    dictionary[default_key] = default_dictionary[default_key]

            # If it is not a threshold dictionary, run recursive call to check values of inner dictionary
            except:
                dictionary[default_key] = set_default_settings(dictionary[default_key], default_dictionary[default_key]) 

    return dictionary


def calc_time(time_input: int) -> str:
    """
    Converts seconds into weeks, days, hours, minutes, seconds.
    
    Args:
        time_input (int): Time in seconds

    Return:
        str: Time string
    """

    # Unit 
    units = [
        (604800, 'week', 'weeks'),
        (86400, 'day', 'days'),
        (3600, 'hour', 'hours'),
        (60, 'minute', 'minutes'),
        (1, 'second', 'seconds')
    ]

    result_list = []

    # For each time unit
    for unit_time, singular_label, plural_label in units:

        # Floor division
        unit_count = int(time_input // unit_time)

        # Modular division
        time_input %= unit_time

        # If unit count is not 0, add to result_list with proper label
        if unit_count > 0:
            label = singular_label if unit_count == 1 else plural_label
            result_list.append(f"{unit_count} {label}")

        # If unit count is 0
        else:
            pass

    return ", ".join(result_list) if result_list != [] else "0 seconds"


def create_crafting_setting_output(crafting_dict: dict, category_name: str = None, type_name: str = None):

    def create_output(crafting_dict: dict):
        output_list = [[]]
        i = 0

        for category in crafting_dict:
            for _type in crafting_dict[category]:


                output_list[i].append(f"**Category:** {category}**")
                output_list[i].append(f"**Type:** {_type}")

                output_list[i].append(f"\n**Level Req:** {crafting_dict[category][_type][0]}")
                output_list[i].append(f"**DC:** {crafting_dict[category][_type][1]}")
                output_list[i].append(f"**Nat1 Penalty:** {crafting_dict[category][_type][2]}")
                output_list[i].append(f"**Nat20 Bonus:** {crafting_dict[category][_type][3]}")
                output_list[i].append(f"**Total Successes:** {crafting_dict[category][_type][4]}")
                output_list[i].append(f"**Total Failures Allowed:** {crafting_dict[category][_type][5]}")
                output_list[i].append(f"**Cooldown:** {crafting_dict[category][_type][6]} seconds ({calc_time(crafting_dict[category][_type][6])})")

                if len(crafting_dict[category][_type]) == 9:
                    output_list[i].append(f"**Item Retil Cost:** {crafting_dict[category][_type][7]}gp")

                else:
                    output_list[i][1] += "gp"

                output_list[i].append(f"**Color Hex Code:** {crafting_dict[category][_type][-1]}")
                
                i += 1
                output_list.append([])

        return [i for i in output_list if i != []]

    def search_type(crafting_dict: dict, category_name: str, type_search: str):

        if (search_result := search_list(type_search, crafting_dict[category_name].keys())):

            if len(search_result) == 1:
                return create_output({category_name: {search_result[0]: crafting_dict[category_name][search_result[0]]}}), None
        
            else:
                for match in search_result:
                    if match.lower() != type_search.lower():
                        pass

                    else:
                        return create_output({category_name: {search_result[0]: crafting_dict[category_name][match]}}), None

                search_result.insert(0, "Mutliple Types Found:")
                return create_output({category_name: crafting_dict[category_name]}), "\n".join(search_result)

        else:
            return create_output({category_name: crafting_dict[category_name]}), f"Type not found ({type_search})"

    if not category_name:
        return create_output(crafting_dict), None

    else:
        if (search_result := search_list(category_name, crafting_dict.keys())):
            
            if len(category_name) == 1:
                if not type_name:
                    return create_output({search_result[0]: crafting_dict[search_result[0]]}), None

                else:
                    return search_type(crafting_dict, search_result[0], type_name)

            else:
                for match in search_result:
                    if match.lower() != category_name.lower():
                        pass

                    else:
                        if not type_name:
                            return create_output({match: crafting_dict[match]}), None

                        else:
                            return search_type(crafting_dict, match, type_name)

                search_result.insert(0, "Multiple Matches Found:")
                return create_output(crafting_dict), "\n".join(search_result)

        else:
            return create_output(crafting), f"Category not found ({category_name})"

def create_general_setting_output(setting_dict: dict, default_dict: dict, setting_name: str = None):

    def create_output(setting_dict: dict, default_dict: dict):

        settings_list = [f"**{setting_name}:** {setting_value} (Default: {default_dict[setting_name]})" for settings_name, setting_value in setting_dict.items()]

        result_list = []
        setting_num_limit = 4

        for i in range(0, len(settings_list), setting_num_limit):
            result_list.append("\n".join(settings_list[i:i+setting_num_limit]))

        return result_list

    if not setting_name:
        create_output(setting_dict, default_dict), None

    else:

        if (search_result := search_list(setting_name, setting_dict.keys())):

            if len(search_result) == 1:
                return create_output({search_result[0]: setting_dict[search_result[0]]}, {search_result[0]: default_dict[search_result[0]]})


            else:
                for match in search_result:
                    if match.lowe() != setting_name.lower():
                        pass

                    else:
                        return create_output({match: setting_dict[match]}, {match: default_dict[match]})

                search_result.insert(0, "Mutliple Settings Found:")
                return create_output(setting_dict, default_dict), "\n".join(search_result)

        else:
            return create_output(setting_dict, default_dict), f"Setting Not Found ({setting_name})"


def main(input_list: list[str]) -> list[str]:
    """
    Main program function

    Args:
        input_list (list): List of inputs
        settings_dictioanry (dict): Settings dictionary (default: grab_settings_dict())

    Return:
        (list[str]): Result
    """

    svar_dict_default = {
        "lfg_integration": False,
        "pro_rate_refund": True,
        "success_dispType": "star",
        "failure_dispType": "hex",
        "jack_of_trades": True,
        "reliable_talent": False,
        "success_mod_threshold": {
            "-999": 1,
            "5": 2,
            "10": 3,
            "15": 4,
            "20": 5
            }, 
        "whitelisted_channel_ids": [], 
        "parent_channel_inherit": False, 
        "xp_categories": False, 
        "max_history": 15
    }

    crafting_nonmagical_defaults = {
        "nonmagical": {"0": [5, 8, -1, 5, 1, 1, 7200, "#242528"]
            "101": [9, 13, -2, 5, 5, 2, 14400, "#242528"],
            "501": [13, 18, -3, 5, 8, 3, 21600, "#242528"],
            "5001": [17, 23, -4, 5, 13, 4, 28800, "#242528"],
            "50001": [20, 25, -5, 5, 20, 5, 36000, "#242528"]
        }
    }


    # If SVAR exists, load dictionary
    if (svar_test := get_svar('crafting_settings')):
        svar_dict = set_default_settings(load_json(svar_test), svar_dict_default)

        # If there is at least one item category
        if len(svar_dict) > 11:
            pass

        # If there are no item categories
        else:
            svar_dict.update(crafting_nonmagical_defaults)

    # If SVAR does not exist, create dictionary via unpacking
    else:
        svar_dict = {**svar_dict_default, **crafting_nonmagical_defaults}

    items_dict = {item_category: item_type for item_category, item_type in svar_dict.items() if not item_category in svar_dict_default.keys()}

    settings_dict = {setting_name: setting_value for setting_name, setting_value in svar_dict.items() if setting_name in svar_dict_default.keys()}

    if len(input_list) == 0:
        items_list, warning = create_crafting_setting_output(items_dict)
        crafting_list, _ = create_general_setting_output(settings_dict, svar_dict_default)

        output_list = items_list + crafting_list

    elif len(input_list == 1):

        if input_list[0].lower() in "settings":
            output_list, warning = create_general_setting_output(settings_dict, svar_dict_default)

        else:
            output_list, warning = create_crafting_setting_output(items_dict)

    elif len(input_list == 2):
        try:
            page_num = int(input_list[1])

            if input_list[0].lower() in "settings":
                output_list, warning = create_general_setting_output(settings_dict, svar_dict_default)

            else:
                output_list, warning = create_crafting_setting_output(items_dict)

        except:
            if input_list[0].lower() in "settings":
                output_list, warning = create_general_setting_output(settings_dict, svar_dict_default, input_list[1])

            else:
                output_list, warning = create_crafting_setting_output(items_dict, input_list[1])

            page_num = 1

    else:
        try:
            page_num = int(input_list[2])

        except:
            page_num = 1

        if input_list[0].lower() in "settings":
            output_list, warning = create_general_setting_output(settings_dict, svar_dict_default, input_list[1])

        else:
            output_list, warning = create_crafting_setting_output(items_dict, input_list[1])

    if page_num < 1:
        page_num = 1

    elif page_num > (output_len := len(output_list)):
        page_num = output_len

    else:
        pass

    if not warning:
        f = "\n".join(output_list[page_num-1])
        color = ""

    else:
        f = "\n".join([f"`{warning}`"] + output_list[page_num-1])
        color = "#CF142B"

    return "You Look Through Server Settings", f, "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Customizable-Crafting-System/main/Data/images/list.png", color


# Main program function
title, f, thumb, color = main(&ARGS&)
l = "<"


</drac2>
-title "{{title}}"
-f "{{f}}"
-thumb "{{thumb}}"
-color "{{color}}"
-footer "{{ctx.prefix}}craft list {{l}}crafting/setting> {{l}}crafitng_category/setting_name> | Updated 12/25/23 | ShadowsStride"